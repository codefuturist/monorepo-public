#!/bin/bash

# ssh-config-manager.sh
# Comprehensive SSH configuration and security hardening script for Linux systems
# Author: Generated by GitHub Copilot
# Version: 2.0
# Date: $(date +%Y-%m-%d)

set -euo pipefail  # Exit on error, undefined vars, pipe failures
IFS=$'\n\t'        # Secure Internal Field Separator

# Global variables
readonly SCRIPT_NAME="$(basename "$0")"
readonly SSH_CONFIG="/etc/ssh/sshd_config"
readonly SSH_CONFIG_BACKUP="${SSH_CONFIG}.backup.$(date +%Y%m%d_%H%M%S)"
readonly LOG_FILE="/var/log/ssh-config-changes.log"

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Logging function
log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo -e "[${timestamp}] [${level}] ${message}" | tee -a "${LOG_FILE}" 2>/dev/null || echo -e "[${timestamp}] [${level}] ${message}"
}

# Print colored output
print_status() {
    local color="$1"
    shift
    echo -e "${color}$*${NC}"
}

# Display usage information
usage() {
    cat << EOF
Usage: $SCRIPT_NAME [OPTIONS]

Configure SSH settings on Linux systems with security hardening options.

OPTIONS:
    -h, --help          Display this help message
    -y, --yes           Skip confirmation prompts
    -b, --backup-only   Only create backup, don't modify config
    -r, --restart       Restart SSH service after changes
    -v, --verbose       Enable verbose output
    
CONFIGURATION OPTIONS:
    --enable-password   Enable password authentication (default)
    --disable-password  Disable password authentication
    --disable-root      Disable root login over SSH
    --enable-root       Enable root login (not recommended)
    --change-port PORT  Change SSH port (default: 22)
    --max-auth-tries N  Set maximum authentication tries (default: 6)
    --login-grace TIME  Set login grace time (default: 2m)
    --enable-x11        Enable X11 forwarding
    --disable-x11       Disable X11 forwarding
    --hardening-preset  Apply security hardening preset
    --show-current      Show current SSH configuration

EXAMPLES:
    $SCRIPT_NAME                          # Interactive mode (enable password auth)
    $SCRIPT_NAME --enable-password -y -r  # Enable password auth, auto-confirm
    $SCRIPT_NAME --disable-root --change-port 2222  # Disable root, change port
    $SCRIPT_NAME --hardening-preset -y    # Apply security hardening
    $SCRIPT_NAME --show-current           # Show current configuration

SECURITY WARNING:
    Some options may reduce security. Review changes carefully.
    Consider using key-based authentication when possible.

EOF
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        print_status "$RED" "Error: This script must be run as root or with sudo"
        print_status "$YELLOW" "Try: sudo $0 $*"
        exit 1
    fi
}

# Check if SSH server is installed
check_ssh_installed() {
    if ! command -v sshd >/dev/null 2>&1; then
        print_status "$RED" "Error: SSH server (sshd) is not installed"
        print_status "$BLUE" "Install with: apt-get install openssh-server (Debian/Ubuntu) or yum install openssh-server (RHEL/CentOS)"
        exit 1
    fi
}

# Detect the Linux distribution
detect_distro() {
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        echo "$ID"
    elif [[ -f /etc/redhat-release ]]; then
        echo "rhel"
    elif [[ -f /etc/debian_version ]]; then
        echo "debian"
    else
        echo "unknown"
    fi
}

# Get SSH service name based on distribution
get_ssh_service_name() {
    local distro="$1"
    case "$distro" in
        ubuntu|debian)
            echo "ssh"
            ;;
        centos|rhel|fedora|rocky|almalinux)
            echo "sshd"
            ;;
        *)
            echo "sshd"
            ;;
    esac
}

# Create backup of SSH config
create_backup() {
    log "INFO" "Creating backup of SSH configuration"
    
    if [[ ! -f "$SSH_CONFIG" ]]; then
        print_status "$RED" "Error: SSH config file $SSH_CONFIG not found"
        exit 1
    fi
    
    if cp "$SSH_CONFIG" "$SSH_CONFIG_BACKUP"; then
        print_status "$GREEN" "Backup created: $SSH_CONFIG_BACKUP"
        log "INFO" "Backup created successfully: $SSH_CONFIG_BACKUP"
    else
        print_status "$RED" "Error: Failed to create backup"
        log "ERROR" "Failed to create backup of SSH config"
        exit 1
    fi
}

# Check current SSH password authentication status
check_current_status() {
    log "INFO" "Checking current SSH configuration status"
    
    echo
    print_status "$BLUE" "=== CURRENT SSH CONFIGURATION ==="
    
    # Password Authentication
    local password_auth_status
    if grep -q "^PasswordAuthentication.*yes" "$SSH_CONFIG"; then
        password_auth_status="enabled"
    elif grep -q "^PasswordAuthentication.*no" "$SSH_CONFIG"; then
        password_auth_status="disabled"
    else
        password_auth_status="default (usually enabled)"
    fi
    echo "Password Authentication: $password_auth_status"
    
    # Root Login
    local root_login_status
    if grep -q "^PermitRootLogin.*yes" "$SSH_CONFIG"; then
        root_login_status="enabled"
    elif grep -q "^PermitRootLogin.*no" "$SSH_CONFIG"; then
        root_login_status="disabled"
    elif grep -q "^PermitRootLogin.*prohibit-password" "$SSH_CONFIG"; then
        root_login_status="key-based only"
    else
        root_login_status="default (key-based only)"
    fi
    echo "Root Login: $root_login_status"
    
    # SSH Port
    local ssh_port
    if grep -q "^Port" "$SSH_CONFIG"; then
        ssh_port=$(grep "^Port" "$SSH_CONFIG" | awk '{print $2}')
    else
        ssh_port="22 (default)"
    fi
    echo "SSH Port: $ssh_port"
    
    # Max Auth Tries
    local max_auth_tries
    if grep -q "^MaxAuthTries" "$SSH_CONFIG"; then
        max_auth_tries=$(grep "^MaxAuthTries" "$SSH_CONFIG" | awk '{print $2}')
    else
        max_auth_tries="6 (default)"
    fi
    echo "Max Auth Tries: $max_auth_tries"
    
    # Login Grace Time
    local login_grace_time
    if grep -q "^LoginGraceTime" "$SSH_CONFIG"; then
        login_grace_time=$(grep "^LoginGraceTime" "$SSH_CONFIG" | awk '{print $2}')
    else
        login_grace_time="2m (default)"
    fi
    echo "Login Grace Time: $login_grace_time"
    
    # X11 Forwarding
    local x11_forwarding
    if grep -q "^X11Forwarding.*yes" "$SSH_CONFIG"; then
        x11_forwarding="enabled"
    elif grep -q "^X11Forwarding.*no" "$SSH_CONFIG"; then
        x11_forwarding="disabled"
    else
        x11_forwarding="default (enabled)"
    fi
    echo "X11 Forwarding: $x11_forwarding"
    
    echo "=================================="
    echo
}

# Enable password authentication
enable_password_auth() {
    log "INFO" "Enabling SSH password authentication"
    
    # Remove any existing PasswordAuthentication lines
    sed -i '/^[[:space:]]*PasswordAuthentication/d' "$SSH_CONFIG"
    
    # Add the new setting
    echo "" >> "$SSH_CONFIG"
    echo "# Password authentication enabled by $SCRIPT_NAME on $(date)" >> "$SSH_CONFIG"
    echo "PasswordAuthentication yes" >> "$SSH_CONFIG"
    
    print_status "$GREEN" "Password authentication enabled"
    log "INFO" "Password authentication enabled successfully"
}

# Disable password authentication
disable_password_auth() {
    log "INFO" "Disabling SSH password authentication"
    
    # Remove any existing PasswordAuthentication lines
    sed -i '/^[[:space:]]*PasswordAuthentication/d' "$SSH_CONFIG"
    
    # Add the new setting
    echo "" >> "$SSH_CONFIG"
    echo "# Password authentication disabled by $SCRIPT_NAME on $(date)" >> "$SSH_CONFIG"
    echo "PasswordAuthentication no" >> "$SSH_CONFIG"
    
    print_status "$GREEN" "Password authentication disabled"
    log "INFO" "Password authentication disabled successfully"
}

# Configure root login
configure_root_login() {
    local setting="$1"
    log "INFO" "Configuring root login: $setting"
    
    # Remove any existing PermitRootLogin lines
    sed -i '/^[[:space:]]*PermitRootLogin/d' "$SSH_CONFIG"
    
    # Add the new setting
    echo "" >> "$SSH_CONFIG"
    echo "# Root login configured by $SCRIPT_NAME on $(date)" >> "$SSH_CONFIG"
    echo "PermitRootLogin $setting" >> "$SSH_CONFIG"
    
    print_status "$GREEN" "Root login set to: $setting"
    log "INFO" "Root login configured: $setting"
}

# Change SSH port
change_ssh_port() {
    local port="$1"
    log "INFO" "Changing SSH port to: $port"
    
    # Validate port number
    if ! [[ "$port" =~ ^[0-9]+$ ]] || [ "$port" -lt 1 ] || [ "$port" -gt 65535 ]; then
        print_status "$RED" "Error: Invalid port number: $port"
        return 1
    fi
    
    # Remove any existing Port lines
    sed -i '/^[[:space:]]*Port/d' "$SSH_CONFIG"
    
    # Add the new setting at the beginning (after includes)
    local temp_file=$(mktemp)
    head -n 12 "$SSH_CONFIG" > "$temp_file"
    echo "" >> "$temp_file"
    echo "# SSH port changed by $SCRIPT_NAME on $(date)" >> "$temp_file"
    echo "Port $port" >> "$temp_file"
    tail -n +13 "$SSH_CONFIG" >> "$temp_file"
    mv "$temp_file" "$SSH_CONFIG"
    
    print_status "$GREEN" "SSH port changed to: $port"
    print_status "$YELLOW" "Remember to update firewall rules and reconnect on new port!"
    log "INFO" "SSH port changed to: $port"
}

# Configure max authentication tries
configure_max_auth_tries() {
    local tries="$1"
    log "INFO" "Setting max authentication tries to: $tries"
    
    # Validate number
    if ! [[ "$tries" =~ ^[0-9]+$ ]] || [ "$tries" -lt 1 ] || [ "$tries" -gt 20 ]; then
        print_status "$RED" "Error: Invalid number of tries: $tries (must be 1-20)"
        return 1
    fi
    
    # Remove any existing MaxAuthTries lines
    sed -i '/^[[:space:]]*MaxAuthTries/d' "$SSH_CONFIG"
    
    # Add the new setting
    echo "" >> "$SSH_CONFIG"
    echo "# Max auth tries configured by $SCRIPT_NAME on $(date)" >> "$SSH_CONFIG"
    echo "MaxAuthTries $tries" >> "$SSH_CONFIG"
    
    print_status "$GREEN" "Max authentication tries set to: $tries"
    log "INFO" "Max authentication tries configured: $tries"
}

# Configure login grace time
configure_login_grace_time() {
    local grace_time="$1"
    log "INFO" "Setting login grace time to: $grace_time"
    
    # Remove any existing LoginGraceTime lines
    sed -i '/^[[:space:]]*LoginGraceTime/d' "$SSH_CONFIG"
    
    # Add the new setting
    echo "" >> "$SSH_CONFIG"
    echo "# Login grace time configured by $SCRIPT_NAME on $(date)" >> "$SSH_CONFIG"
    echo "LoginGraceTime $grace_time" >> "$SSH_CONFIG"
    
    print_status "$GREEN" "Login grace time set to: $grace_time"
    log "INFO" "Login grace time configured: $grace_time"
}

# Configure X11 forwarding
configure_x11_forwarding() {
    local setting="$1"
    log "INFO" "Configuring X11 forwarding: $setting"
    
    # Remove any existing X11Forwarding lines
    sed -i '/^[[:space:]]*X11Forwarding/d' "$SSH_CONFIG"
    
    # Add the new setting
    echo "" >> "$SSH_CONFIG"
    echo "# X11 forwarding configured by $SCRIPT_NAME on $(date)" >> "$SSH_CONFIG"
    echo "X11Forwarding $setting" >> "$SSH_CONFIG"
    
    print_status "$GREEN" "X11 forwarding set to: $setting"
    log "INFO" "X11 forwarding configured: $setting"
}

# Apply security hardening preset
apply_hardening_preset() {
    log "INFO" "Applying SSH security hardening preset"
    print_status "$YELLOW" "Applying security hardening preset..."
    
    # Security hardening configurations
    local settings=(
        "# SSH Security Hardening applied by $SCRIPT_NAME on $(date)"
        ""
        "# Disable password authentication (use key-based auth)"
        "PasswordAuthentication no"
        ""
        "# Disable root login"
        "PermitRootLogin no"
        ""
        "# Limit authentication attempts"
        "MaxAuthTries 3"
        ""
        "# Reduce login grace time"
        "LoginGraceTime 1m"
        ""
        "# Disable empty passwords"
        "PermitEmptyPasswords no"
        ""
        "# Disable X11 forwarding for security"
        "X11Forwarding no"
        ""
        "# Disable agent forwarding"
        "AllowAgentForwarding no"
        ""
        "# Disable TCP forwarding"
        "AllowTcpForwarding no"
        ""
        "# Disable gateway ports"
        "GatewayPorts no"
        ""
        "# Use protocol 2 only"
        "Protocol 2"
        ""
        "# Limit max sessions"
        "MaxSessions 2"
        ""
        "# Enable strict mode"
        "StrictModes yes"
        ""
        "# Disable unused authentication methods"
        "ChallengeResponseAuthentication no"
        "HostbasedAuthentication no"
        "IgnoreUserKnownHosts yes"
        "IgnoreRhosts yes"
        ""
        "# Set idle timeout"
        "ClientAliveInterval 300"
        "ClientAliveCountMax 2"
    )
    
    # Remove existing configurations that we're setting
    local patterns=(
        "PasswordAuthentication"
        "PermitRootLogin"
        "MaxAuthTries"
        "LoginGraceTime"
        "PermitEmptyPasswords"
        "X11Forwarding"
        "AllowAgentForwarding"
        "AllowTcpForwarding"
        "GatewayPorts"
        "Protocol"
        "MaxSessions"
        "StrictModes"
        "ChallengeResponseAuthentication"
        "HostbasedAuthentication"
        "IgnoreUserKnownHosts"
        "IgnoreRhosts"
        "ClientAliveInterval"
        "ClientAliveCountMax"
    )
    
    for pattern in "${patterns[@]}"; do
        sed -i "/^[[:space:]]*$pattern/d" "$SSH_CONFIG"
    done
    
    # Add hardening configurations
    echo "" >> "$SSH_CONFIG"
    for setting in "${settings[@]}"; do
        echo "$setting" >> "$SSH_CONFIG"
    done
    
    print_status "$GREEN" "Security hardening preset applied"
    print_status "$YELLOW" "WARNING: Password authentication is now DISABLED"
    print_status "$YELLOW" "Make sure you have SSH key access before restarting SSH!"
    log "INFO" "Security hardening preset applied successfully"
}

# Validate SSH configuration
validate_config() {
    log "INFO" "Validating SSH configuration"
    
    if sshd -t; then
        print_status "$GREEN" "SSH configuration is valid"
        log "INFO" "SSH configuration validation passed"
        return 0
    else
        print_status "$RED" "Error: SSH configuration is invalid"
        log "ERROR" "SSH configuration validation failed"
        
        # Restore backup
        print_status "$YELLOW" "Restoring backup configuration..."
        cp "$SSH_CONFIG_BACKUP" "$SSH_CONFIG"
        log "INFO" "Backup configuration restored"
        
        return 1
    fi
}

# Restart SSH service
restart_ssh_service() {
    local distro="$1"
    local service_name
    service_name=$(get_ssh_service_name "$distro")
    
    log "INFO" "Restarting SSH service: $service_name"
    print_status "$YELLOW" "Restarting SSH service..."
    
    if systemctl restart "$service_name"; then
        print_status "$GREEN" "SSH service restarted successfully"
        log "INFO" "SSH service ($service_name) restarted successfully"
        
        # Check service status
        if systemctl is-active --quiet "$service_name"; then
            print_status "$GREEN" "SSH service is running"
            log "INFO" "SSH service is active and running"
        else
            print_status "$RED" "Warning: SSH service may not be running properly"
            log "WARNING" "SSH service status check failed"
        fi
    else
        print_status "$RED" "Error: Failed to restart SSH service"
        log "ERROR" "Failed to restart SSH service ($service_name)"
        return 1
    fi
}

# Display security warning
show_security_warning() {
    cat << EOF

$(print_status "$YELLOW" "SECURITY WARNING:")
$(print_status "$YELLOW" "================")

Password authentication is generally less secure than key-based authentication.
Consider the following security best practices:

1. Use strong, unique passwords for all user accounts
2. Consider implementing fail2ban to prevent brute-force attacks
3. Change the default SSH port (22) to a non-standard port
4. Disable root login over SSH
5. Use SSH key-based authentication when possible
6. Regularly monitor SSH access logs (/var/log/auth.log)

$(print_status "$BLUE" "To disable password auth later, run:")
$(print_status "$BLUE" "sed -i 's/^PasswordAuthentication yes/PasswordAuthentication no/' $SSH_CONFIG")

EOF
}

# Main function
main() {
    local auto_confirm=false
    local backup_only=false
    local restart_service=false
    local verbose=false
    local action="enable_password"  # Default action
    local ssh_port=""
    local max_auth_tries=""
    local login_grace_time=""
    local show_current_only=false
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                usage
                exit 0
                ;;
            -y|--yes)
                auto_confirm=true
                shift
                ;;
            -b|--backup-only)
                backup_only=true
                shift
                ;;
            -r|--restart)
                restart_service=true
                shift
                ;;
            -v|--verbose)
                verbose=true
                set -x
                shift
                ;;
            --enable-password)
                action="enable_password"
                shift
                ;;
            --disable-password)
                action="disable_password"
                shift
                ;;
            --disable-root)
                action="disable_root"
                shift
                ;;
            --enable-root)
                action="enable_root"
                shift
                ;;
            --change-port)
                action="change_port"
                if [[ -n "$2" && "$2" != -* ]]; then
                    ssh_port="$2"
                    shift 2
                else
                    print_status "$RED" "Error: --change-port requires a port number"
                    exit 1
                fi
                ;;
            --max-auth-tries)
                action="max_auth_tries"
                if [[ -n "$2" && "$2" != -* ]]; then
                    max_auth_tries="$2"
                    shift 2
                else
                    print_status "$RED" "Error: --max-auth-tries requires a number"
                    exit 1
                fi
                ;;
            --login-grace)
                action="login_grace"
                if [[ -n "$2" && "$2" != -* ]]; then
                    login_grace_time="$2"
                    shift 2
                else
                    print_status "$RED" "Error: --login-grace requires a time value"
                    exit 1
                fi
                ;;
            --enable-x11)
                action="enable_x11"
                shift
                ;;
            --disable-x11)
                action="disable_x11"
                shift
                ;;
            --hardening-preset)
                action="hardening_preset"
                shift
                ;;
            --show-current)
                show_current_only=true
                shift
                ;;
            *)
                print_status "$RED" "Unknown option: $1"
                usage
                exit 1
                ;;
        esac
    done
    
    # Print script header
    print_status "$BLUE" "SSH Configuration Manager"
    print_status "$BLUE" "========================"
    echo
    
    # Initial checks
    check_root
    check_ssh_installed
    
    # Detect distribution
    local distro
    distro=$(detect_distro)
    log "INFO" "Detected Linux distribution: $distro"
    [[ "$verbose" == true ]] && print_status "$BLUE" "Detected distribution: $distro"
    
    # Show current status
    check_current_status
    
    # If show-current-only mode, exit here
    if [[ "$show_current_only" == true ]]; then
        exit 0
    fi
    
    # Create backup
    create_backup
    
    # If backup-only mode, exit here
    if [[ "$backup_only" == true ]]; then
        print_status "$GREEN" "Backup completed. Exiting without making changes."
        exit 0
    fi
    
    # Confirmation prompt
    if [[ "$auto_confirm" == false ]]; then
        echo
        case "$action" in
            "enable_password")
                print_status "$YELLOW" "This will enable SSH password authentication."
                ;;
            "disable_password")
                print_status "$YELLOW" "This will disable SSH password authentication."
                print_status "$RED" "WARNING: Make sure you have SSH key access!"
                ;;
            "disable_root")
                print_status "$YELLOW" "This will disable root login over SSH."
                ;;
            "enable_root")
                print_status "$YELLOW" "This will enable root login over SSH."
                print_status "$RED" "WARNING: This reduces security!"
                ;;
            "change_port")
                print_status "$YELLOW" "This will change SSH port to: $ssh_port"
                print_status "$RED" "WARNING: Update firewall rules and reconnect on new port!"
                ;;
            "hardening_preset")
                print_status "$YELLOW" "This will apply security hardening preset."
                print_status "$RED" "WARNING: Password authentication will be DISABLED!"
                print_status "$RED" "Make sure you have SSH key access!"
                ;;
            *)
                print_status "$YELLOW" "This will modify SSH configuration."
                ;;
        esac
        
        show_security_warning
        echo
        read -p "Continue? (y/N): " -r
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_status "$YELLOW" "Operation cancelled by user"
            exit 0
        fi
    fi
    
    # Apply configuration changes
    case "$action" in
        "enable_password")
            enable_password_auth
            ;;
        "disable_password")
            disable_password_auth
            ;;
        "disable_root")
            configure_root_login "no"
            ;;
        "enable_root")
            configure_root_login "yes"
            ;;
        "change_port")
            change_ssh_port "$ssh_port"
            ;;
        "max_auth_tries")
            configure_max_auth_tries "$max_auth_tries"
            ;;
        "login_grace")
            configure_login_grace_time "$login_grace_time"
            ;;
        "enable_x11")
            configure_x11_forwarding "yes"
            ;;
        "disable_x11")
            configure_x11_forwarding "no"
            ;;
        "hardening_preset")
            apply_hardening_preset
            ;;
        *)
            print_status "$RED" "Error: Unknown action: $action"
            exit 1
            ;;
    esac
    
    # Validate configuration
    if ! validate_config; then
        print_status "$RED" "Configuration validation failed. Changes reverted."
        exit 1
    fi
    
    # Restart SSH service if requested
    if [[ "$restart_service" == true ]]; then
        restart_ssh_service "$distro"
    else
        print_status "$YELLOW" "SSH service not restarted. Changes will take effect after manual restart:"
        print_status "$BLUE" "systemctl restart $(get_ssh_service_name "$distro")"
    fi
    
    # Final status
    echo
    print_status "$GREEN" "SSH configuration has been successfully updated!"
    log "INFO" "Script completed successfully"
    
    # Show updated configuration
    echo
    print_status "$BLUE" "=== UPDATED CONFIGURATION ==="
    check_current_status
    
    # Show final security reminder
    if [[ "$auto_confirm" == false ]]; then
        echo
        print_status "$YELLOW" "Remember to implement additional security measures as recommended."
        if [[ "$action" == "change_port" ]]; then
            echo
            print_status "$RED" "IMPORTANT: Update your firewall rules for port $ssh_port"
            print_status "$RED" "Reconnect using: ssh -p $ssh_port user@hostname"
        fi
    fi
}

# Run main function with all arguments
main "$@"